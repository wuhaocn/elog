// This program demonstrates attaching an eBPF program to a network interface
// with XDP (eXpress Data Path). The program parses the IPv4 source address
// from packets and writes the packet count by IP to an LRU hash map.
// The userspace program (Go code in this file) prints the contents
// of the map to stdout every second.
// It is possible to modify the XDP program to drop or redirect packets
// as well -- give it a try!
// This example depends on bpf_link, available in Linux kernel version 5.7 or newer.
package main

import (
	"bytes"
	"encoding/binary"
	"errors"
	"log"
	"net"
	"os"
	"strings"

	"github.com/cilium/ebpf/link"
	"github.com/cilium/ebpf/ringbuf"
)

//go:generate go run github.com/cilium/ebpf/cmd/bpf2go -type event bpf tc.c -- -I../../headers

func main() {
	stopper := make(chan os.Signal, 1)
	if len(os.Args) < 2 {
		log.Fatalf("Please specify a network interface")
	}

	// Look up the network interface by name.
	ifaceName := os.Args[1]
	iface, err := net.InterfaceByName(ifaceName)
	if err != nil {
		log.Fatalf("lookup network iface %q: %s", ifaceName, err)
	}

	// Load pre-compiled programs into the kernel.
	objs := bpfObjects{}
	if err := loadBpfObjects(&objs, nil); err != nil {
		log.Fatalf("loading objects: %s", err)
	}
	defer objs.Close()

	// Attach the program.
	l, err := link.AttachTCX(link.TCXOptions{
		Program:   objs.TcProgFunc,
		Interface: iface.Index,
	})
	if err != nil {
		log.Fatalf("could not attach XDP program: %s", err)
	}
	defer l.Close()

	log.Printf("Attached XDP program to iface %q (index %d)", iface.Name, iface.Index)
	log.Printf("Press Ctrl-C to exit and remove the program")

	rd, err := ringbuf.NewReader(objs.bpfMaps.Events)
	if err != nil {
		log.Fatalf("opening ringbuf reader: %s", err)
	}
	defer rd.Close()

	log.Printf("%-15s %-6s -> %-15s %-6s %-10s %-10s  %-10s  %-10s %-10s  %-10s",
		"Src addr",
		"Port",
		"Dest addr",
		"Port",
		"CurTime",
		"NetProto",
		"NetCmd",
		"NetFlag",
		"AppProto",
		"AppCmd",
	)
	go readLoop(rd)

	// Wait
	<-stopper
}

func readLoop(rd *ringbuf.Reader) {
	// bpfEvent is generated by bpf2go.
	var event bpfEvent
	for {
		record, err := rd.Read()
		if err != nil {
			if errors.Is(err, ringbuf.ErrClosed) {
				log.Println("received signal, exiting..")
				return
			}
			log.Printf("reading from reader: %s", err)
			continue
		}

		// Parse the ringbuf event entry into a bpfEvent structure.
		if err := binary.Read(bytes.NewBuffer(record.RawSample), binary.LittleEndian, &event); err != nil {
			log.Printf("parsing ringbuf event: %s", err)
			continue
		}

		log.Printf("%-15s %-6d -> %-15s %-6d %-10d %-10d  %-10d  %-10s %-10d  %-10d",
			intToIP(event.Saddr),
			event.Sport,
			intToIP(event.Daddr),
			event.Dport,
			event.Curtime,
			event.Netproto,
			event.Netcmd,
			netflagsToString(event.Netflags),
			event.Appproto,
			event.Appcmd,
		)
	}
}
func intToIP(ipNum uint32) net.IP {
	ip := make(net.IP, 4)
	binary.NativeEndian.PutUint32(ip, ipNum)
	return ip
}


// 将 netflags 的 uint8 值转换为字符串表示
func netflagsToString(flags uint8) string {
    var flagStrings []string

    if flags&1 != 0 {
        flagStrings = append(flagStrings, "SYN")
    }
    if flags&2 != 0 {
        flagStrings = append(flagStrings, "ACK")
    }
    if flags&4 != 0 {
        flagStrings = append(flagStrings, "FIN")
    }
    if flags&8 != 0 {
        flagStrings = append(flagStrings, "RST")
    }
    if flags&16 != 0 {
        flagStrings = append(flagStrings, "PSH")
    }
    if flags&32 != 0 {
        flagStrings = append(flagStrings, "URG")
    }

    return strings.Join(flagStrings, ", ")
}

